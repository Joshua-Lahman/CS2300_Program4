# Joshua Lahman
# CS2300 Programming Assignment #4
# Part 2

import math


# FUNCTIONS==========================================
# dot product for 2 3x1 column vectors
def dot3x1(a, b): # input is 2 lists of 3 floats each
    return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2])


# addition for 2 3x1 column vectors
def add3x1(a, b):  # input is 2 lists of 3 floats each
    return [round(a[0] + b[0], 1), round(a[1] + b[1], 1), round(a[2] + b[2], 1)]


# subtractions for 2 3x1 column vectors
def sub3x1(a, b):  # input is 2 lists of 3 floats each
    return [a[0] - b[0], a[1] - b[1], a[2] - b[2]]


def mul3x1(a, b):  # input is a float & 1 lists of 3 floats
    return [a * b[0], a * b[1], a * b[2]]


# normalize vector
def normalize(y):
    normal = math.sqrt(y[0]*y[0] + y[1]*y[1] + y[2]*y[2])
    return [y[0]/normal, y[1]/normal, y[2]/normal]


# Point normal form of plane
def pointNorm(n, x): # 2 3x1 column vectors of floats
    return [n[0], n[1], n[2], (n[0]*x[0] + n[1]*x[1] + n[2]*x[2])] # list of 4 floats


# find distance using point and plane in point normal form
def dist(p, x): # p == len 4 list, x == len 3 list
    numerator = abs(p[0]*x[0] + p[1]*x[1] + p[2]*x[2] + p[3])
    denominator = math.sqrt(p[0]*p[0] + p[1]*p[1] + p[2]*p[2])
    return numerator / denominator


# find the cross product of 2 3x1 column vectors
def cross3x1(a, b):  # input is 2 lists of 3 floats each
    return [a[1]*b[2] - a[2]*b[1], a[2]*b[0] - a[0]*b[2], a[0]*b[1] - a[1]*b[0]]


# calculate the intersection point of a triangle and a line
def intersect_triangle_line(x, line1, line2):
    # calculate vectors for the line and the triangle edges
    line_vec = sub3x1(line2, line1)
    edge1 = sub3x1(x[1], x[0])
    edge2 = sub3x1(x[2], x[0])
    h = cross3x1(line_vec, edge2)
    a = dot3x1(edge1, h)

    # check if line and triangle are parallel
    if a == 0:
        return "Does not intersect."

    # calculate intersection point
    f = 1 / a
    s = sub3x1(line1, x[0])
    u = f * dot3x1(s, h)

    if u < 0 or u > 1:
        return "Does not intersect."

    q = cross3x1(s, edge1)
    v = f * dot3x1(line_vec, q)

    if v < 0 or u + v > 1:
        return "Does not intersect."

    t = f * dot3x1(edge2, q)
    return add3x1(line1, mul3x1(t, line_vec))


# DATA INPUT===========================================
# set file name to variable
txt = 'input_2.txt'

# open txt file and copy data
with open(txt, 'r') as f:
    data = f.readlines()  # read raw lines into an array

# organize data into n-dimension array
matrix = []
intCount = 0
for raw_line in data:
    split_line = raw_line.strip().split(" ")  # ["1", "0" ... ]
    # loop to count number of items in matrix
    for x in split_line:
        intCount = intCount + 1
    # format matrix
    nums_ls = [float(x.replace('"', '')) for x in split_line]
    matrix.append(nums_ls)

# INPUT PROCESSING===========================================
# count number of rows in input matrix
totalRowCount = 0
for line in matrix:
    totalRowCount += 1

# create new matrix with by deleting first row of input matrix
newMatrix = []
for i in range(0, totalRowCount - 1):
    newMatrix.append(matrix[i])

# parse instructions from last line in matrix
input123 = []
input456 = []
input789 = []
for i in range(0, 3):
    input123.append(matrix[-1][i])
for i in range(3, 6):
    input456.append(matrix[-1][i])
for i in range(6, 9):
    input789.append(matrix[-1][i])

q = input123
v = input456
n = input789

# normalize n
n = normalize(n)

# create point normal form of plane
plane = pointNorm(n, q)

# create array of points
points = []
aList = []
for line in newMatrix:
    aList = []
    for i in range(0, 3):
        aList.append(line[i])
    points.append(aList)

    aList = []
    for i in range(3, 6):
        aList.append(line[i])
    points.append(aList)

    aList = []
    for i in range(6, 9):
        aList.append(line[i])
    points.append(aList)

# find distances------------------
distances = []
for line in points:
    distances.append(dist(plane, line))

# INPUT PROCESSING part 2===========================================
# count number of rows in input matrix
totalRowCount = 0
for line in matrix:
    totalRowCount += 1

# create new matrix with by deleting first row of input matrix
newMatrix2 = []
for i in range(1, totalRowCount):
    newMatrix2.append(matrix[i])

# parse instructions from first line in matrix
input123 = []
input456 = []
input789 = []
for i in range(0, 3):
    input123.append(matrix[0][i])
for i in range(3, 6):
    input456.append(matrix[0][i])
for i in range(6, 9):
    input789.append(matrix[0][i])

line1 = input123
line2 = input456
planePoint = input789

# find triangles & line intersection-----------
triangleFile = open("Part2_triangle_jlahman", "w")
for x in newMatrix2:
    print(x)
    triangleFile.writelines(str(intersect_triangle_line([[x[0], x[1], x[2]], [x[3], x[4], x[5]], [x[6], x[7], x[8]]], line1, line2)) + "\n")


# DATA OUTPUT =====================================================
# write distances to file
distancesFile = open("Part2_distance_jlahman", "w")
for line in distances:
    distancesFile.writelines(str(round(line, 2)) + "\n")

